#!groovy

node {
    script {
        pom = readMavenPom file: 'pom.xml'
        VERSION = pom.version     
        TIME = java.time.LocalDateTime.now().toLocalDate();
     }
     echo "${TIME}"
     echo "${VERSION}"

stage('Git Checkout') {
    git url: "ssh://jenkins@codeurjc-forge-gerrit:29418/awesome-project"
}

stage ('Unit and SystemTest') {
     docker.image('maven:3-jdk-8-alpine').inside('-v $HOME/.m2:/root/.m2 '
     +'-v /var/run/docker.sock:/var/run/docker.sock') {
        sh 'rm /target/*.flv || true'
        sh 'mvn package -Dmaven.test.failure.ignore=true -Dtest=BoardParameterizedTest,BoardTest,TicTacToeGameTest,TicTacToeSystemTest test'  }
        step([$class: 'JUnitResultArchiver', testResults: '**/target/surefire-reports/TEST-*.xml'])
        archiveArtifacts artifacts: 'target/*.flv'
}

stage ('Sonar Analysis') {
     docker.image('maven:3-jdk-8-alpine').inside('-v $HOME/.m2:/root/.m2 ' + '--link sonarqube-forja:sonarqube --network=ci-network '
     +'-v /var/run/docker.sock:/var/run/docker.sock') {
        sh 'mvn sonar:sonar -Dsonar.jdbc.url=jdbc:h2:tcp://sonarqube:9090/sonar -Dsonar.host.url=http://sonarqube:9000'
    }
}

stage ('Build Docker image') {
    
     sh 'cp config/nightly_dockerfile target/Dockerfile'
     sh "docker build  -t forjaci2019/awesome-project:${VERSION}.nightly.${TIME} target/."
 }

stage ('Run System Test over docker image') {
     docker.image('forjaci2019/awesome-project:latest').inside('-v $HOME/.m2:/root/.m2 '
     +'-v /var/run/docker.sock:/var/run/docker.sock --entrypoint=""') {
        sh 'rm target/*.jar && cp /usr/local/lib/TicTacToe.jar target/'
        sh 'mvn -Dmaven.test.failure.ignore=true -Dtest=WebAppSeleniumSystemTest test'
     }
 }
  
 stage ('Upload image to DockerHub') {
     sh "docker tag forjaci2019/awesome-project:${VERSION}.nightly.${TIME} forjaci2019/awesome-project:dev"
     sh 'docker login -u="forjaci2019" -p="forjaci2019"'
     sh 'docker push forjaci2019/awesome-project:dev'
    }
}
